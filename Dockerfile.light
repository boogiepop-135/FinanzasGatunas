# Multi-stage build para optimizar el tama침o
FROM node:18-alpine AS node-base

# Instalar Python en la imagen base de Node.js
RUN apk add --no-cache \
    python3 \
    py3-pip \
    && python3 -m pip install --upgrade pip

# Etapa de construcci칩n
FROM node-base AS builder

WORKDIR /app

# Copiar archivos de configuraci칩n
COPY package*.json ./
COPY python_backend/requirements.txt ./python_backend/

# Instalar dependencias de Node.js
RUN npm ci --only=production

# Instalar dependencias de Python
RUN pip3 install -r python_backend/requirements.txt

# Etapa final
FROM node-base AS runtime

WORKDIR /app

# Copiar dependencias instaladas
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /usr/lib/python3* /usr/lib/
COPY --from=builder /usr/bin/python3* /usr/bin/

# Copiar c칩digo fuente
COPY . .

# Crear directorios necesarios
RUN mkdir -p data python_backend/data exports

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Cambiar permisos
RUN chown -R nodejs:nodejs /app
USER nodejs

# Exponer puerto
EXPOSE 3000

# Comando por defecto
CMD ["npm", "run", "dev"] 